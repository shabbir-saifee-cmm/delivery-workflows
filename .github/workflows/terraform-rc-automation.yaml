name: Full Terraform RC Pipeline

on:
  workflow_call:
    inputs:
      artifactConfigPath:
        description: 'Path to the artifact configuration file in the repository'
        required: true
        type: string
    secrets:
      TF_AUTOMATION_APP_ID:
        description: 'github app id for terraform-control repo access'
        required: true
      TF_AUTOMATION_APP_SECRET:
        description: 'github app secret for terraform-control repo access'
        required: true

jobs:
  complete-pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write
    steps:
      # STEP 1: Validate comment and get PR details
      - name: Checkout terraform repo
        uses: actions/checkout@v3

      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TF_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.TF_AUTOMATION_APP_SECRET }}
          repositories: terraform-control

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const prNumber = context.payload.issue.number;
            const comment = context.payload.comment.body.trim();
            const commentPrefix = 'ready-to-test-terraform-';

            // Read artifact configuration from file
            const artifactConfigPath = '${{ inputs.artifactConfigPath }}';
            console.log('Reading artifact config from:', artifactConfigPath);

            let artifactConfigYaml;
            try {
              artifactConfigYaml = fs.readFileSync(artifactConfigPath, 'utf8');
              console.log('Artifact config file content:', artifactConfigYaml);
            } catch (error) {
              core.setFailed(`Failed to read artifact configuration file at ${artifactConfigPath}: ${error.message}`);
              return;
            }

            let artifactConfig;
            try {
              // Simple YAML parser for the terraform config structure
              const yamlLines = artifactConfigYaml.split('\n').map(line => line.trim()).filter(line => line && !line.startsWith('#'));
              artifactConfig = { terraform: {} };

              let currentModule = null;
              for (const line of yamlLines) {
                if (line === 'terraform:') continue;

                if (line.endsWith(':') && !line.includes('moduleName') && !line.includes('modulePath')) {
                  // This is an module key
                  currentModule = line.replace(':', '').trim();
                  artifactConfig.terraform[currentModule] = {};
                } else if (currentModule && line.includes('moduleName:')) {
                  artifactConfig.terraform[currentModule].moduleName = line.split('moduleName:')[1].trim();
                } else if (currentModule && line.includes('modulePath:')) {
                  artifactConfig.terraform[currentModule].modulePath = line.split('modulePath:')[1].trim();
                }
              }
            } catch (error) {
              core.setFailed(`Failed to parse artifact configuration: ${error.message}`);
              return;
            }

            console.log('Parsed artifact config:', JSON.stringify(artifactConfig, null, 2));

            // Extract environment from comment
            const envRegex = new RegExp(`^${commentPrefix.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}(\\w+)$`);
            const envMatch = comment.match(envRegex);

            if (!envMatch) {
              core.setFailed(`Invalid comment format. Use: ${commentPrefix}<env>`);
              return;
            }

            const environment = envMatch[1].toLowerCase();

            if (!environment.includes('dev')) {
              core.setFailed(`❌ Automation only allowed for environments containing 'dev'. Got: ${environment}`);
              return;
            }

            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });

            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number: prNumber, per_page: 100 }
            );

            // Check for changes in configured terraform modules
            const changedModules = new Set();

            for (const [moduleKey, moduleConfig] of Object.entries(artifactConfig.terraform)) {
              const modulePath = moduleConfig.modulePath;
              if (!modulePath) {
                console.log(`Warning: No modulePath configured for terraform module ${moduleKey}`);
                continue;
              }

              // Remove leading ./ if present and ensure trailing slash
              const normalizedPath = modulePath.replace(/^\.\//, '').replace(/\/$/, '') + '/';
              console.log(`Checking for changes in ${normalizedPath} for terraform module ${moduleKey}`);

              for (const file of files) {
                if (file.filename.startsWith(normalizedPath)) {
                  console.log(`Found change in ${file.filename} for terraform module ${moduleKey}`);
                  changedModules.add(moduleKey);
                  break;
                }
              }
            }

            const moduleNameList = Array.from(changedModules);

            if (moduleNameList.length === 0) {
              const configuredPaths = Object.entries(artifactConfig.terraform)
                .map(([key, config]) => `${key}: ${config.modulePath}`)
                .join(', ');
              core.setFailed(`No terraform module changes detected in configured terraform modules. Configured paths: ${configuredPaths}`);
              return;
            } else if (moduleNameList.length > 1) {
              core.setFailed(`Multiple modules changed: ${moduleNameList.join(', ')}. Only one module change is allowed per PR.`);
              return;
            }

            const moduleKey = moduleNameList[0];
            const moduleConfig = artifactConfig.terraform[moduleKey];
            const moduleName = moduleConfig.moduleName || moduleKey;
            const modulePath = moduleConfig.modulePath;
            const prAuthor = pr.user.login;

            core.setOutput("head_branch", pr.head.ref);
            core.setOutput("head_sha", pr.head.sha);
            core.setOutput("pr_number", prNumber);
            core.setOutput("module_key", moduleKey);
            core.setOutput("module_name", moduleName);
            core.setOutput("module_path", modulePath);
            core.setOutput("environment", environment);
            core.setOutput("pr_author", prAuthor);

            core.info(`✅ Module Key: ${moduleKey}, Module Name: ${moduleName}, Module Path: ${modulePath}, Env: ${environment}`);

      # STEP 2: Create RC tag for the changed module
      - name: Create new RC tag for module
        id: create-tag
        run: |
          set -e

          MODULE_KEY=${{ steps.pr-details.outputs.module_key }}
          MODULE_NAME=${{ steps.pr-details.outputs.module_name }}
          BRANCH_NAME=${{ steps.pr-details.outputs.head_branch }}
          SHA=${{ steps.pr-details.outputs.head_sha }}
          AUTHOR=${{ steps.pr-details.outputs.pr_author }}

          echo "🔧 Module Key: $MODULE_KEY"
          echo "🔧 Module Name: $MODULE_NAME"
          echo "🔧 Branch: $BRANCH_NAME"
          echo "🔧 Commit SHA: $SHA"

          # Clean branch name (remove special characters, convert to lowercase)
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          echo "🔧 Clean branch: $CLEAN_BRANCH"

          # Fetch tags from remote
          git fetch --tags origin

          # Tag format: rc/terraform/${moduleKey}/0.0.0-${branch}-${incrementor}
          TAG_PREFIX="rc/terraform/${MODULE_KEY}"
          VERSION_PREFIX="0.0.0-${CLEAN_BRANCH}"

          # Get latest RC tag for this module key and branch
          LATEST_TAG=$(git tag --list "${TAG_PREFIX}/${VERSION_PREFIX}-*" | sort -V | tail -n 1)
          echo "🔍 Latest tag for ${MODULE_KEY}: ${LATEST_TAG:-none}"

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_RC_NUM=1
          else
            # Extract the incrementor number from the tag
            RC_NUM=$(echo $LATEST_TAG | sed -E "s|.*${VERSION_PREFIX//./\\.}-([0-9]+)$|\1|")
            if [[ -z "$RC_NUM" || ! "$RC_NUM" =~ ^[0-9]+$ ]]; then
              echo "⚠️ Could not extract RC number from $LATEST_TAG, starting from 1"
              NEW_RC_NUM=1
            else
              NEW_RC_NUM=$((RC_NUM + 1))
            fi
          fi

          # Create the new tag and version
          NEW_VERSION="${VERSION_PREFIX}-${NEW_RC_NUM}"
          NEW_TAG="${TAG_PREFIX}/${NEW_VERSION}"

          # Check if tag already exists (local or remote)
          while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
            echo "Tag $NEW_TAG already exists, incrementing RC number"
            NEW_RC_NUM=$((NEW_RC_NUM + 1))
            NEW_VERSION="${VERSION_PREFIX}-${NEW_RC_NUM}"
            NEW_TAG="${TAG_PREFIX}/${NEW_VERSION}"
          done

          echo "🏷️ New tag: $NEW_TAG"
          echo "📦 New version: $NEW_VERSION"

          # Create and push the tag
          git tag $NEW_TAG $SHA
          git push origin $NEW_TAG

          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # STEP 3: Publish terraform module
      - name: Publish terraform module
        id: publish
        run: |
          set -e

          MODULE_KEY="${{ steps.pr-details.outputs.module_key }}"
          MODULE_NAME="${{ steps.pr-details.outputs.module_name }}"
          NEW_TAG="${{ steps.create-tag.outputs.new_tag }}"
          NEW_VERSION="${{ steps.create-tag.outputs.new_version }}"

          echo "📦 Publishing module: $MODULE_KEY ($MODULE_NAME)"
          echo "📦 Tag: $NEW_TAG"
          echo "📦 Version for control repo: $NEW_VERSION"

          # Add your actual publishing logic here
          # This could be:
          # - Publishing to Terraform Cloud/Enterprise
          # - Publishing to a private registry
          # - Building and uploading artifacts

          # Simulate publishing for now
          sleep 2
          echo "✅ Module published successfully"
          echo "status=success" >> $GITHUB_OUTPUT

      # STEP 4: Update control repo
      - name: Update version in terraform-control and open PR
        id: update-control
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          set -e

          MODULE_KEY=${{ steps.pr-details.outputs.module_key }}
          MODULE_NAME=${{ steps.pr-details.outputs.module_name }}
          NEW_TAG=${{ steps.create-tag.outputs.new_tag }}
          NEW_VERSION=${{ steps.create-tag.outputs.new_version }}
          AUTHOR=${{ steps.pr-details.outputs.pr_author }}
          PR_NUMBER=${{ steps.pr-details.outputs.pr_number }}
          ENV=${{ steps.pr-details.outputs.environment }}
          BRANCH_NAME=${{ steps.pr-details.outputs.head_branch }}
          UPDATE_BRANCH_NAME="auto-update-${MODULE_KEY}-$(echo ${BRANCH_NAME} | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')-${PR_NUMBER}"

          CONTROL_REPO="shabbir-saifee-cmm/terraform-control"
          CONTROL_CLONE="terraform-control"

          gh repo clone $CONTROL_REPO $CONTROL_CLONE
          cd $CONTROL_CLONE

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Check if remote branch exists, else create from main
          if git ls-remote --heads origin $UPDATE_BRANCH_NAME | grep $UPDATE_BRANCH_NAME; then
            git checkout $UPDATE_BRANCH_NAME
            git pull origin $UPDATE_BRANCH_NAME
          else
            git checkout -b $UPDATE_BRANCH_NAME origin/main
          fi

          # Update file - use MODULE_NAME for directory structure
          FILE_PATH="projects/${MODULE_NAME}/${ENV}/main.tf"

          if [ ! -f "$FILE_PATH" ]; then
            echo "❌ File not found: $FILE_PATH"
            echo "Available files in projects/${MODULE_NAME}:"
            find projects/${MODULE_NAME} -name "*.tf" 2>/dev/null || echo "No terraform files found"
            exit 1
          fi

          echo "📝 Updating $FILE_PATH with version $NEW_VERSION"

          # Update version with the version format (not the full tag)
          sed -i -E "0,/^(\s*version)(\s*=\s*)\"[^\"]+\"/s//\1\2\"${NEW_VERSION}\"/" $FILE_PATH

          git add $FILE_PATH

          git commit -m "Update ${MODULE_KEY} module to ${NEW_VERSION}

          Module Name: ${MODULE_NAME}
          Branch: ${BRANCH_NAME}
          Tag: ${NEW_TAG}
          Co-authored-by: ${AUTHOR} <${AUTHOR}@users.noreply.github.com>" || echo "No changes to commit"

          # Push branch
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${CONTROL_REPO}.git
          git push --force-with-lease origin $UPDATE_BRANCH_NAME

          # Check if PR exists
          EXISTING_PR=$(gh pr list --repo $CONTROL_REPO --head $UPDATE_BRANCH_NAME --json number --jq '.[0].number')

          if [ -z "$EXISTING_PR" ]; then
            # Create PR body using echo statements
            echo "This PR updates the \`${MODULE_KEY}\` module to use version \`${NEW_VERSION}\` in \`${ENV}\`." > pr_body.md
            echo "" >> pr_body.md
            echo "## 📋 Details" >> pr_body.md
            echo "- **Module Key**: \`${MODULE_KEY}\`" >> pr_body.md
            echo "- **Module Name**: \`${MODULE_NAME}\`" >> pr_body.md
            echo "- **Environment**: \`${ENV}\`" >> pr_body.md
            echo "- **New Version**: \`${NEW_VERSION}\`" >> pr_body.md
            echo "- **Source Branch**: \`${BRANCH_NAME}\`" >> pr_body.md
            echo "- **Full Tag**: \`${NEW_TAG}\`" >> pr_body.md
            echo "- **Triggered by**: [@${AUTHOR}](https://github.com/${AUTHOR})" >> pr_body.md
            echo "- **Source PR**: [#${PR_NUMBER}](https://github.com/${{ github.repository }}/pull/${PR_NUMBER}) in [\`${{ github.repository }}\`](https://github.com/${{ github.repository }})" >> pr_body.md
            echo "" >> pr_body.md
            echo "---" >> pr_body.md
            echo "*This PR was automatically created by the terraform automation system.*" >> pr_body.md

            gh pr create --title "Update ${MODULE_KEY} module to ${NEW_VERSION} (${BRANCH_NAME}) by @${AUTHOR}" \
              --body-file pr_body.md \
              --base main --head $UPDATE_BRANCH_NAME \
              --assignee $AUTHOR \
              --reviewer $AUTHOR

            echo "✅ Created new PR for ${MODULE_KEY} update"
          else
            echo "✅ Updated existing PR #$EXISTING_PR for ${MODULE_KEY}"
          fi

          PR_URL=$(gh pr list --repo $CONTROL_REPO --head $UPDATE_BRANCH_NAME --json url --jq '.[0].url')

          if [ -z "$PR_URL" ]; then
            COMMIT_SHA=$(git rev-parse HEAD)
            PR_URL="https://github.com/${CONTROL_REPO}/commit/${COMMIT_SHA}"
            MSG="🔄 Updated \`${MODULE_KEY}\` in [terraform-control](${PR_URL}) (commit only, no PR)."
          else
            MSG="📦 Opened/updated terraform-control PR for \`${MODULE_KEY}\`: ${PR_URL}"
          fi

          echo "control_message=$MSG" >> $GITHUB_OUTPUT

      # STEP 5: Final status comment
      - name: Comment on PR with final status
        uses: actions/github-script@v6
        with:
          script: |
            const newTag = '${{ steps.create-tag.outputs.new_tag }}';
            const newVersion = '${{ steps.create-tag.outputs.new_version }}';
            const moduleKey = '${{ steps.pr-details.outputs.module_key }}';
            const moduleName = '${{ steps.pr-details.outputs.module_name }}';
            const modulePath = '${{ steps.pr-details.outputs.module_path }}';
            const environment = '${{ steps.pr-details.outputs.environment }}';
            const branchName = '${{ steps.pr-details.outputs.head_branch }}';
            const controlMessage = '${{ steps.update-control.outputs.control_message }}';
            const workflowUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-details.outputs.pr_number }},
              body: `🎉 **Terraform RC Pipeline Complete!**

              ## 📋 Summary
              - **Module Key**: \`${moduleKey}\`
              - **Module Name**: \`${moduleName}\`
              - **Module Path**: \`${modulePath}\`
              - **Environment**: \`${environment}\`
              - **Source Branch**: \`${branchName}\`
              - **RC Tag**: \`${newTag}\`
              - **Version**: \`${newVersion}\`

              ## ✅ Pipeline Steps
              1. ✅ **Tag Created**: \`${newTag}\`
              2. ✅ **Module Published**: Successfully published to Terraform registry
              3. ✅ **Control Repo Updated**: ${controlMessage}

              Your changes are ready for deployment in \`${environment}\` environment!

              [View Workflow Run](${workflowUrl})`
            });

      # STEP 6: Handle failures and comment on PR
      - name: Comment on PR with failure details
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const workflowUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            // Try to get PR number from different sources
            let prNumber = null;
            try {
              prNumber = context.payload.issue?.number || '${{ steps.pr-details.outputs.pr_number }}' || null;
            } catch (e) {
              console.log('Could not determine PR number:', e);
            }

            if (!prNumber) {
              console.log('No PR number available, skipping failure comment');
              return;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `❌ **Terraform RC Pipeline Failed**

              The automation encountered an error and could not complete successfully.

              Please check the [workflow logs](${workflowUrl}) for detailed error information, then fix any issues and retry your comment.

              [View Full Workflow Run](${workflowUrl})`
            });
