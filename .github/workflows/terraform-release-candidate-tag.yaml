name: Create RC Tag on Comment

on:
  workflow_call:
    outputs:
      created_tag:
        description: 'The tag that was created'
        value: ${{ jobs.create-rc-tag.outputs.created_tag }}
      app_name:
        description: 'The app name that was detected'
        value: ${{ jobs.create-rc-tag.outputs.app_name }}
      environment:
        description: 'The environment that was requested'
        value: ${{ jobs.create-rc-tag.outputs.environment }}
      pr_number:
        description: 'The PR number'
        value: ${{ jobs.create-rc-tag.outputs.pr_number }}

jobs:
  create-rc-tag:
    if: >
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, 'ready-to-test-terraform-')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      created_tag: ${{ steps.create-tag.outputs.new_tag }}
      app_name: ${{ steps.pr-details.outputs.app_name }}
      environment: ${{ steps.pr-details.outputs.environment }}
      pr_number: ${{ steps.pr-details.outputs.pr_number }}
    steps:
      - name: Checkout terraform repo
        uses: actions/checkout@v3

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.issue.number;
            const comment = context.payload.comment.body.trim();
            const commentPrefix = 'ready-to-test-terraform-';
            const forbiddenEnvs = ['prod', 'production']; // ENFORCED
            const appDetectionPattern = '^terraform\/([^\/]+)\/'; // ENFORCED

            // Extract environment from comment
            const envRegex = new RegExp(`^${commentPrefix.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}(\\w+)$`);
            const envMatch = comment.match(envRegex);

            if (!envMatch) {
              core.setFailed(`Invalid comment format. Use: ${commentPrefix}<env>`);
              return;
            }

            const environment = envMatch[1].toLowerCase();

            if (forbiddenEnvs.includes(environment)) {
              core.setFailed(`‚ùå Automation not allowed for environment: ${environment}`);
              return;
            }

            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });

            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number: prNumber, per_page: 100 }
            );

            const appNames = new Set();
            const regex = new RegExp(appDetectionPattern);

            for (const file of files) {
              const match = file.filename.match(regex);
              if (match) {
                appNames.add(match[1]);
              }
            }

            const appNameList = Array.from(appNames);

            if (appNameList.length === 0) {
              core.setFailed("No app changes detected under terraform/. PR must modify terraform/<app>/...");
              return;
            } else if (appNameList.length > 1) {
              core.setFailed(`Multiple apps changed: ${appNameList.join(', ')}. Only one app change is allowed per PR.`);
              return;
            }

            const appName = appNameList[0];
            const prAuthor = pr.user.login;

            core.setOutput("head_branch", pr.head.ref);
            core.setOutput("head_sha", pr.head.sha);
            core.setOutput("pr_number", prNumber);
            core.setOutput("app_name", appName);
            core.setOutput("environment", environment);
            core.setOutput("pr_author", prAuthor);

            core.info(`‚úÖ App: ${appName}, Env: ${environment}`);

      - name: Create new RC tag for app
        id: create-tag
        run: |
          set -e

          APP_NAME=${{ steps.pr-details.outputs.app_name }}
          SHA=${{ steps.pr-details.outputs.head_sha }}
          AUTHOR=${{ steps.pr-details.outputs.pr_author }}
          TAG_PREFIX="0.0.0-terraform"  # ENFORCED

          echo "üîß App: $APP_NAME"
          echo "üîß Commit SHA: $SHA"

          # Fetch tags from remote
          git fetch --tags origin

          # Get latest RC tag for this app (sorted by version)
          LATEST_TAG=$(git tag --list "${TAG_PREFIX}-${APP_NAME}-rc*" | sort -V | tail -n 1)
          echo "üîç Latest tag: ${LATEST_TAG:-none}"

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_RC_NUM=1
          else
            RC_NUM=$(echo $LATEST_TAG | sed -E 's/.*-rc([0-9]+)$/\1/')
            NEW_RC_NUM=$((RC_NUM + 1))
          fi

          NEW_TAG="${TAG_PREFIX}-${APP_NAME}-${AUTHOR}-rc${NEW_RC_NUM}"

          # Check if tag already exists (local or remote)
          while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
            echo "Tag $NEW_TAG already exists, incrementing RC number"
            NEW_RC_NUM=$((NEW_RC_NUM + 1))
            NEW_TAG="${TAG_PREFIX}-${APP_NAME}-${AUTHOR}-rc${NEW_RC_NUM}"
          done

          echo "üè∑Ô∏è New tag: $NEW_TAG"

          # Create and push the tag
          git tag $NEW_TAG $SHA
          git push origin $NEW_TAG

          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Store metadata for later workflows
        uses: actions/github-script@v6
        with:
          script: |
            // Store metadata as a PR comment that workflow 2 can read
            const metadata = {
              pr_number: '${{ steps.pr-details.outputs.pr_number }}',
              environment: '${{ steps.pr-details.outputs.environment }}',
              app_name: '${{ steps.pr-details.outputs.app_name }}',
              pr_author: '${{ steps.pr-details.outputs.pr_author }}',
              new_tag: '${{ steps.create-tag.outputs.new_tag }}',
              head_sha: '${{ steps.pr-details.outputs.head_sha }}'
            };

            // Create a hidden comment with metadata
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-details.outputs.pr_number }},
              body: `<!-- WORKFLOW_METADATA:${JSON.stringify(metadata)} -->
üè∑Ô∏è Created tag \`${{ steps.create-tag.outputs.new_tag }}\` for app \`${{ steps.pr-details.outputs.app_name }}\`.

üìã **Details:**
- **Environment**: \`${{ steps.pr-details.outputs.environment }}\`
- **Tag**: \`${{ steps.create-tag.outputs.new_tag }}\`
- **App**: \`${{ steps.pr-details.outputs.app_name }}\`

‚è≥ Publishing workflow will start automatically...`
            });
